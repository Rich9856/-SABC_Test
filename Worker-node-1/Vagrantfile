# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.hostname = "master-node1"
  
  # Configuration de la paire de cles SSH
  #config.ssh.private_key_path = "C:/Users/nadeg/Documents/Test2/.vagrant/machines/default/virtualbox/private_key"

  #Appplication fichier de configuration Ansible
  #config.vm.provision "ansible" do |ansible| 
    #ansible.playbook ="deployment_test.yml"
  #end

  #Authentification credentials AWS
  #config.vm.provider :aws do |aws, override|
    #aws.access_key_id = "AKIAVZMYZEHIMJKRLDNE"
    #aws.secret_access_key = "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"
    #aws.default_region_name = "eu-north-1"
  #end 
  # Provisioning configuration to install Terraform

  config.vm.provision "shell", inline: <<-SHELL

    # MAJ systeme et installation des modules

    sudo yum update

    sudo yum install -y wget

    sudo yum install -y unzip


    # Install Terraform

    wget https://releases.hashicorp.com/terraform/0.15.4/terraform_0.15.4_linux_amd64.zip

    unzip terraform_0.15.4_linux_amd64.zip

    sudo mv terraform /usr/local/bin/

    rm terraform_0.15.4_linux_amd64.zip

  SHELL

  # Provisioning configuration to install Ansible

  config.vm.provision "shell", inline: <<-SHELL

    # Enable EPEL repository
    sudo yum install -y epel-release

    # Install Ansible

    sudo yum install -y ansible

  SHELL


  # Provisioning configuration to install Pulumi

  config.vm.provision "shell", inline: <<-SHELL

    # Install Pulumi

    curl -fsSL https://get.pulumi.com | sh

  SHELL


 # Provisioning configuration to install Docker
  config.vm.provision "shell", inline: <<-SHELL
    # Install required packages
    sudo yum install -y yum-utils device-mapper-persistent-data lvm2

    # Configure Docker repository
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    # Install Docker
    sudo yum install -y docker-ce docker-ce-cli containerd.io

    # Start and enable Docker service
    sudo systemctl start docker
    sudo systemctl enable docker

    #Activaton installation plugin sur Containerd.io
    sudo cat  /etc/containerd/config.toml
    #   Copyright 2018-2022 Docker Inc.
    
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.        
    #   You may obtain a copy of the License at
    
    #       http://www.apache.org/licenses/LICENSE-2.0
    
    #   Unless required by applicable law or agreed to in writing, software     
    #   distributed under the License is distributed on an "AS IS" BASIS,       
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and     
    #   limitations under the License.
    
    enabled_plugins = ["cri"]
    
    #root = "/var/lib/containerd"
    #state = "/run/containerd"
    #subreaper = true
    #oom_score = 0
    
    #[grpc]
    #  address = "/run/containerd/containerd.sock"
    #  uid = 0
    #  gid = 0
    
    #[debug]
    #  address = "/run/containerd/debug.sock"
    #  uid = 0
    #  gid = 0
    #  level = "info"
  SHELL

 #Installation python et autres librairies
  config.vm.provision "shell", inline: <<-SHELL

    # Installation Kubernetes
    sudo vi /etc/yum.repos.d/kubernetes.repo
    [kubernetes]
    name=Kubernetes
    baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
    enabled=1
    gpgcheck=1
    gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key  
    exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

    sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

    # Start and enable Docker service
    sudo systemctl start docker
    sudo systemctl enable docker

    # Python
    sudo yum install python-pip
    sudo pip install openshift

  SHELL

  
 #Installatiion conteneur des serveur
 config.vm.provision "shell", inline: <<-SHELL
   # Installation serveur d'application
   sudo docker run --name nginx -p 80:80 -d nginx

   # Installation SGBD
   sudo docker run --name postgres -e POSTGRES_PASSWORD=your_password -p 5432:5432 -d postgres

   # Installation Serveur de donnees
   sudo docker run --name mysql -e MYSQL_ROOT_PASSWORD=your_password -p 3306:3306 -d mysql
  SHELL

  #Initier notre cluster 
  config.vm.provision "shell", inline: <<-SHELL
   # Initier le cluster avec Kubeadm
   sudo kubeadm join 192.168.33.20:6443 --token vf0j03.mfja0b5hxxgitg6k --discovery-token-ca-cert-hash  sha256:81dc3a25758209bc957d581a8670ede483082f3bf0250037c07aa53f351ad7a5
      # Ne pas oublier de noter et de suavegarder le Token master pour la creation ulterieure de node plus tard
   
   # Configurer Kubectl pour qu'il agisse avec notre cluster
   mkdir -p $HOME/.kube
   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   sudo chown $(id -u):$(id -g) $HOME/.kube/config

   # Verification etat du cluster
   # kubectl get nodes
   # kubectl get pods --all-namespaces

   # Installation Serveur de donnees
   sudo docker run --name mysql -e MYSQL_ROOT_PASSWORD=your_password -p 3306:3306 -d mysql
  SHELL


  config.vm.synced_folder "#{ENV['USERPROFILE']}/Documents", "/vagrant"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = false
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "4096"

     vb.cpus = 4
   end
  #

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end